

-------------01. Find Names of All Employees by First Name--------------


USE soft_uni;

SELECT first_name, last_name FROM employees 
WHERE SUBSTRING(first_name, 1, 2) = "Sa";


-------------02. Find Names of All employees by Last Name-------------


USE soft_uni;

SELECT first_name, last_name FROM employees 
WHERE last_name LIKE '%ei%';


-------------03. Find First Names of All Employees-------------


USE soft_uni;

SELECT first_name FROM employees 
WHERE (department_id = 10 OR department_id = 3) 
AND (YEAR(hire_date) >= 1995 AND YEAR(hire_date)<=2005);


-------------04. Find All Employees Except Engineers-------------


USE soft_uni;

SELECT first_name,last_name FROM employees
WHERE job_title NOT LIKE '%engineer%';


-------------05. Find Towns with Name Length-------------


USE soft_uni;

SELECT name FROM towns
WHERE LENGTH(name) = 5 OR LENGTH(name) = 6
ORDER BY name ASC;


-------------06. Find Towns Starting With-------------


USE soft_uni;

SELECT town_id, name FROM towns
WHERE SUBSTRING(name, 1, 1) = "M" or SUBSTRING(name, 1, 1) = "K" or SUBSTRING(name, 1, 1) = "B" or SUBSTRING(name, 1, 1) = "E"
ORDER BY name ASC;


-------------07. Find Towns Not Starting With-------------


USE soft_uni;

SELECT town_id,name FROM towns
WHERE name NOT LIKE'R%' AND name NOT LIKE 'B%' AND name NOT LIKE 'D%'
ORDER BY name ASC;


-------------08. Create View Employees Hired After 2000 Year-------------


USE soft_uni;

CREATE VIEW v_employees_hired_after_2000 AS
SELECT first_name, last_name FROM employees
WHERE YEAR(hire_date) > 2000;


-------------09. Length of Last Name-------------


USE soft_uni;

SELECT first_name, last_name FROM employees
WHERE LENGTH(last_name) = 5;


-------------10. Countries Holding ‘A’ 3 or More Times-------------


USE geography;

SELECT country_name,iso_code FROM countries
WHERE lower(LENGTH(country_name) - LENGTH(REPLACE(country_name, 'a', ''))+1) >= 3
ORDER BY iso_code;


-------------11. Mix of Peak and River Names-------------


USE geography;

SELECT peak_name, river_name, lower(CONCAT(peak_name, SUBSTRING(river_name, 2))) AS mix
FROM peaks, rivers
WHERE RIGHT(peak_name, 1) = LEFT(river_name, 1)
ORDER BY mix;


-------------12. Games from 2011 and 2012 year-------------


USE diablo;

SELECT name, DATE_FORMAT(START, '%Y-%m-%d') AS start FROM games
WHERE YEAR(start)=2011 OR YEAR(START)=2012
ORDER BY start, name ASC
LIMIT 50;


-------------13. User Email Providers-------------


USE diablo;

SELECT user_name, SUBSTRING_INDEX(email, '@', -1) AS `Email Provider` FROM users
ORDER BY `Email Provider` ASC, user_name ASC;


-------------14. Get Users with IP Address Like Pattern-------------


USE diablo;

SELECT user_name, ip_address FROM users
WHERE ip_address LIKE '___.1%.%.___'
ORDER BY user_name ASC;


-------------15. Show All Games with Duration and Part of the Day-------------


USE diablo;

SELECT name AS game,
CASE WHEN HOUR(start) BETWEEN 0 AND 11 THEN 'Morning'
	 WHEN HOUR(start) BETWEEN 12 AND 17 THEN 'Afternoon'
	 WHEN HOUR(start) BETWEEN 18 AND 23 THEN 'Evening'
END AS 'Part of the day',
CASE WHEN duration <= 3 THEN 'Extra Short'
	 WHEN duration BETWEEN  4 AND 6 THEN 'Short'
     WHEN duration BETWEEN  7 AND 10 THEN 'Long'
     ELSE 'Extra Long' END AS 'Duration'
FROM games;


-------------16. Orders Table-------------


USE orders;

SELECT product_name, order_date, 
DATE_ADD(order_date, INTERVAL 3 DAY) `pay_due`,
DATE_ADD(order_date, INTERVAL 1 MONTH) `deliver_due`
FROM orders;

