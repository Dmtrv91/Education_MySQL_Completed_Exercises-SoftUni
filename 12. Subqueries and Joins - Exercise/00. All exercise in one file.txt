

-------------01. Employee Address--------------


USE soft_uni;

SELECT e.employee_id, e.job_title, a.address_id, a.address_text FROM employees AS e
JOIN addresses AS a
ON e.address_id = a.address_id
ORDER BY A.address_id 
LIMIT 5;


-------------02. Addresses with Towns-------------


USE soft_uni;

SELECT e.first_name, e.last_name, t.name AS `town`, a.address_text FROM employees AS e
JOIN addresses AS a
ON e.address_id = a.address_id
JOIN towns as t
ON a.town_id = t.town_id
ORDER BY e.first_name, e.last_name 
LIMIT 5;


-------------03. Sales Employee-------------


USE soft_uni;

SELECT e.employee_id, e.first_name, e.last_name, d.name AS 'department_name' FROM employees AS e
JOIN departments AS d
ON e.department_id = d.department_id

WHERE d.name = 'Sales'
ORDER BY e.employee_id DESC;


-------------04. Employee Departments-------------


USE soft_uni;

SELECT employee_id,first_name,salary,dep.name AS department_name 
FROM employees AS e 
RIGHT JOIN departments AS dep
USING(`department_id`)
WHERE salary>15000
ORDER BY dep.department_id DESC
LIMIT 5;


-------------05. Employees Without Project-------------


USE soft_uni;

SELECT e.employee_id, e.first_name FROM employees AS e 
LEFT JOIN employees_projects AS p
ON e.employee_id = p.employee_id
WHERE p.employee_id is null
ORDER BY e.employee_id DESC
LIMIT 3;


-------------06. Employees Hired After-------------


USE soft_uni;

SELECT e.first_name, e.last_name, e.hire_date, d.name AS 'dept_name' FROM employees AS e 
JOIN departments AS d
ON e.department_id = d.department_id
WHERE date(e.hire_date) > '1999/1/1' AND d.name IN ('Sales','Finance')
ORDER BY e.hire_date ASC;


-------------07. Employees with Project-------------


USE soft_uni;

SELECT e.employee_id, e.first_name, p.name AS 'project_name' FROM employees AS e 
JOIN employees_projects AS ep
ON ep.employee_id=e.employee_id
JOIN projects AS p
ON ep.project_id=p.project_id
WHERE DATE(p.start_date) > '2002-08-13' AND p.end_date IS NULL
ORDER BY e.first_name ASC, p.name ASC
LIMIT 5;


-------------08. Employee 24-------------


USE soft_uni;

SELECT e.employee_id, e.first_name,
	CASE
		WHEN YEAR(p.start_date) > 2004 THEN p.name = NULL
        ELSE p.name
        END
AS 'project_name' FROM employees AS e 
LEFT JOIN employees_projects AS em
ON em.employee_id = em.employee_id
LEFT JOIN projects AS p
ON em.project_id = p.project_id
WHERE e.employee_id = 24 
ORDER BY  project_name ASC;


-------------09. Employee Manager-------------


USE soft_uni;

SELECT e.employee_id, e.first_name, e2.employee_id, e2.first_name AS 'manager_name'
FROM employees AS e 
JOIN employees AS e2
ON e.manager_id=e2.employee_id
WHERE e.manager_id IN (3,7)
ORDER BY e.first_name ASC;


-------------10. Employee Summary-------------


USE soft_uni;

SELECT e.employee_id, 
	CONCAT(e.first_name, ' ', e.last_name) AS 'employee_name', 
	CONCAT(m.first_name, ' ', m.last_name) AS 'manager_name', 
	d.name AS 'department_name'
FROM employees AS e 
JOIN employees AS m
ON e.manager_id = m.employee_id
JOIN departments AS d
ON d.department_id = e.department_id
ORDER BY e.employee_id ASC
LIMIT 5;


-------------11. Min Average Salary-------------


USE soft_uni; 

SELECT AVG(salary) AS 'min_avarage_salary' FROM employees
GROUP BY department_id
ORDER BY AVG(salary)
LIMIT 1;


-------------12. Highest Peaks in Bulgaria-------------


USE geography;

SELECT con.country_code,mountain_range,peak_name,elevation FROM peaks AS p
JOIN mountains AS m
ON p.mountain_id=m.id
JOIN mountains_countries AS mc
ON m.id=mc.mountain_id
JOIN countries AS con
ON mc.country_code = con.country_code
WHERE p.elevation>2835 AND con.country_code='BG'
ORDER BY p.elevation DESC


-------------13. Count Mountain Ranges-------------


USE geography;

SELECT country_code, COUNT(m.id) AS 'mountain_range' 
FROM mountains_countries AS mc
JOIN mountains AS m
ON mc.mountain_id = m.id
WHERE country_code IN ('BG', 'RU', 'US')
GROUP BY country_code
HAVING mountain_range > 0
ORDER BY mountain_range desc;


-------------14. Countries with Rivers-------------


USE geography;

SELECT country_name,river_name FROM rivers AS r
RIGHT JOIN countries_rivers AS cr
ON r.id = cr.river_id
RIGHT JOIN countries AS c
ON cr.country_code = c.country_code
WHERE continent_code = 'AF'
ORDER BY country_name ASC
LIMIT 5;


-------------15. *Continents and Currencies-------------


USE geography;

SELECT cu2.continent_code, cu2.currency_code , cu2.currency_usage
	FROM (SELECT continent_code, currency_code ,count(currency_code) AS 'currency_usage'
	        FROM countries
			GROUP BY continent_code, currency_code
			HAVING count(currency_code) > 1
           ) AS cu2
	JOIN
		(SELECT cu.continent_code, max(currency_usage) AS 'max_currency_usage'
			FROM
		(SELECT continent_code, currency_code ,count(currency_code) AS 'currency_usage'
			FROM countries
			GROUP BY continent_code, currency_code
			HAVING count(currency_code) > 1) AS cu
			GROUP BY cu.continent_code) AS max_cu
ON cu2.continent_code = max_cu.continent_code
AND cu2.currency_usage = max_cu.max_currency_usage
ORDER BY cu2.continent_code, cu2.currency_code;


-------------16. Countries without any Mountains-------------


USE geography;

SELECT COUNT(c.country_code) - COUNT(mountain_id) AS CountryCode FROM mountains AS m
RIGHT JOIN mountains_countries AS mc
ON m.id = mc.mountain_id
RIGHT JOIN countries AS c
ON mc.country_code=c.country_code


-------------17. Highest Peak and Longest River by Country-------------


USE geography;

SELECT c.country_name,
       MAX(p.elevation) AS highest_peak_elevation,
       MAX(r.length) AS longest_river_length
FROM countries AS c
LEFT JOIN mountains_countries AS mc
ON mc.country_code=c.country_code
LEFT JOIN peaks AS p
ON mc.mountain_id=p.mountain_id
LEFT JOIN countries_rivers AS cr
ON c.country_code = cr.country_code
LEFT JOIN rivers AS r
ON cr.river_id=r.id
GROUP BY c.country_name
ORDER BY highest_peak_elevation DESC,
longest_river_length DESC, c.country_name ASC
LIMIT 5

